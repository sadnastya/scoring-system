openapi: 3.0.0
info:
  version: 1.0.0
  title: Quotes API
  description: API для обработки котировок
paths:
  /api/quote:
    post:
      summary: Выводит результат скоринга по входным данным
      tags:
        - Quotes
      security:
        - BearerAuth: []
      requestBody:
        description: Данные котировки
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
        '400':
          description: Ошибка валидации данных
        '403':
          description: Попытка доступа к ресурсу не админу
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You do not have permission
        '202':
          description: Невозможно проверить входящие данные.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проверка DQ1 выключена.


  /api/auth/register:
    post:
      summary: Регистрация пользователя
      tags:
        - Auth
      security:
        - BearerAuth: []
      requestBody:
        description: Данные для регистрации
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                role:
                  type: string
                # password:
                #   type: string
              required:
                - email
                - role
                # - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
        '400':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already exists
        # '400':
        #   description: Missing required fields
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           message:
        #             type: string
        #             example: Missing required fields
  /api/auth/login:
    post:
      summary: Авторизация пользователя
      tags:
        - Auth
      requestBody:
        description: Учетные данные пользователя
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '403':
          description: Блокировка аккаунта
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Account blocked due to multiple failed attempts
        '401':
          description: Неверные учетные данные

  /api/auth/logout:
    post:
      summary: Выход из системы
      tags:
        - Auth
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Успешный выход
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully.
        '400':
          description: Неверный request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Reqires ''Bearer'' in request '
        '401':
          description: Неавторизованный доступ
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token.
  /api/auth/profile:
    get:
      summary: Получение информации о текущем пользовате
      tags:
        - Profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Данные получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: username
                  email:
                    type: string
                    example: example@email.org
                  first_name:
                    type: string
                    example: first_name
                  second_name:
                    type: string
                    example: second_name
                  created_at:
                    type: string
                    example: '2024-11-24T20:22:50.872068'
                  last_login:
                    type: string
                    example: '2024-11-24T20:22:50.872068'

        '403':
          description: Токен отсутствует или недействителен
    patch:
      summary: Обновление информации о текущем пользователе
      tags:
        - Profile
      security:
        - BearerAuth: []
        - name: password
          required: false
          in: query
          description: Новый пароль
          schema:
            type: string
        - name: first_name
          required: false
          in: query
          description: Новое имя
          schema:
            type: string
        - name: last_name
          required: false
          in: query
          description: Новая фамилия
          schema:
            type: string
      responses:
        '200':
          description: Данные обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated
        # '400':
        #   description: Нет данных в request
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           error:
        #             type: string
        #             example: No data
        '400':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username already exists
        '403':
          description: Токен отсутствует или недействителен
    delete:
      summary: Удалить текущего пользователя
      tags:
        - Profile
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Пользователь удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User id{user.id}, username {username} deleted"
        '403':
          description: Токен отсутствует или недействителен
        '500':
          description: Failed to delete profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to delete profile
  /api/auth/admin/{user_id}:
    get:
      summary: Получение информации о другом пользователе по user_id
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
      - name: user_id
        in: path
        required: true
        description: Уникальный идентификатор пользователя
        schema:
          type: integer
          example: 123
      responses:
        '200':
          description: Данные получены
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: username
                  email:
                    type: string
                    example: example@email.org
                  first_name:
                    type: string
                    example: first_name
                  second_name:
                    type: string
                    example: second_name
                  created_at:
                    type: string
                    example: '2024-11-24T20:22:50.872068'
                  last_login:
                    type: string
                    example: '2024-11-24T20:22:50.872068'
                  roles:
                    type: string
                    example:
                      - admin
                      - userrole
                  login_attempts:
                    type: int
                    example: 3
                  is_blocked:
                    type: bool
                    example: False
                  last_password_reset:
                    type: string
                    example: '2024-11-24T20:22:50.872068'
        '403':
          description: Попытка доступа к ресурсу не админу
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You do not have permission

    patch:
      summary: Обновление информации о пользователе
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
            example: 123
      requestBody:
        description: Новый статус проверки.
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                new_username:
                  type: string
                is_blocked:
                  type: boolean
                first_name:
                  type: string
                last_name:
                  type: string
                roles:
                  type: list

      responses:
        '200':
          description: Данные обновлены
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile updated
        # '400':
        #   description: Нет данных в request
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           error:
        #             type: string
        #             example: No data
        '400':
          description: Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username already exists
        # '403':
        #   description: Попытка доступа к ресурсу не админу
        #   content:
        #     application/json:
        #       schema:
        #         type: object
        #         properties:
        #           error:
        #             type: string
        #             example: You do not have permission
        '403':
            description: Админ изменяет профиль другого админа
            content:
                application/json:
                schema:
                    type: object
                    properties:
                    error:
                        type: string
                        example: Can not change other admin's profile
    delete:
      summary: Удалить пользователя
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: Уникальный идентификатор пользователя
          schema:
            type: integer
            example: 123
      responses:
        '204':
          description: Пользователь удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User id{user.id}, username {username} deleted"
        '403':
          description: Токен отсутствует или недействителен
        '500':
          description: Failed to delete profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to delete profile
  /api/auth/reset_password:
    post:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Request password reset
      description: Sends a password reset link to the provided email address.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        '200':
          description: Reset link sent successfully.
        '404':
          description: Email not found.
        '500':
          description: Failed to send email.

  /api/auth/reset_password/{uuid}:
    post:
      tags:
        - Auth
      security:
        - BearerAuth: []
      summary: Reset user password
      description: Resets the user password using the provided reset token.
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: new_password123
      responses:
        '200':
          description: Password reset successfully.
        '400':
          description: Invalid or expired reset link.

  /api/auth/admin/users:
    get:
      tags:
        - Admin
      security:
        - BearerAuth: []
      summary: Get all users
      description: Retrieve a list of all users with optional filtering.
      parameters:
        - name: email
          in: query
          schema:
            type: string
        - name: username
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
        - name: is_blocked
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        email:
                          type: string
                        username:
                          type: string
                        first_name:
                          type: string
                        second_name:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        last_login:
                          type: string
                          format: date-time
                        is_blocked:
                          type: boolean
                        login_attempts:
                          type: integer
                        last_password_reset:
                          type: string
                          format: date-time
                        roles:
                          type: array
                          items:
                            type: string
                  total:
                    type: integer
                  pages:
                    type: integer
                  current_page:
                    type: integer
                  per_page:
                    type: integer

  /api/auth/admin/users/export:
    get:
      tags:
        - Admin
      security:
        - BearerAuth: []
      summary: Export users
      description: Export user data to a CSV file.
      responses:
        '200':
          description: CSV file generated successfully.
          content:
            text/csv:
              schema:
                type: string

  /api/auth/admin/roles:
    get:
      tags:
        - Admin
      security:
        - BearerAuth: []
      summary: Get all roles
      description: Retrieve a list of all roles.
      responses:
        '200':
          description: List of roles retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: string

    post:
      tags:
        - Admin
      security:
        - BearerAuth: []
      summary: Create a new role
      description: Create a new role in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: admin
      responses:
        '201':
          description: Role created successfully.
        '400':
          description: Role name is required or role already exists.

  /api/dq:
    get:
      summary: Получение истории всех проверок
      description: Возвращает список проверок с возможностью фильтрации по типу проверки, продукту и дате.
      tags:
        - DataQuality
      security:
        - BearerAuth: []
      parameters:
        - name: check_type
          in: query
          description: Тип проверки для фильтрации.
          required: false
          schema:
            type: string
        - name: product_type
          in: query
          description: Тип продукта для фильтрации.
          required: false
          schema:
            type: string
        - name: date
          in: query
          description: Дата для фильтрации (формат YYYY-MM-DD).
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Успешный ответ с данными проверок.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    runId:
                      type: string
                    check_id:
                      type: integer
                    product_type:
                      type: string
                    status:
                      type: boolean
                    date:
                      type: string
                      format: date-time
        '400':
          description: Неверный формат даты.
        '500':
          description: Ошибка сервера.
  /api/dq/{check_id}:
    get:
      summary: Получение записи из истории проверок
      description: Возвращает запись проверки с указанным `check_id`, включая связанные данные запроса.
      tags:
        - DataQuality
      security:
        - BearerAuth: []
      parameters:
        - name: check_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ с данными записи.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  runId:
                    type: string
                  check_id:
                    type: integer
                  product_type:
                    type: string
                  status:
                    type: boolean
                  date:
                    type: string
                    format: date-time
                  request_json:
                    type: object
        '403':
          description: Доступно только админу.
        '404':
          description: Запись или связанный запрос не найдены.
        '500':
          description: Ошибка сервера.
    delete:
      summary: Удаление записи из истории проверок
      description: Удаляет запись из истории проверок с указанным `check_id`.
      tags:
        - DataQuality
      parameters:
        - name: check_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Успешное удаление записи.
        '403':
          description: Доступно только админу.
        '404':
          description: Запись не найдена.
        '500':
          description: Ошибка сервера.
      security:
        - BearerAuth: []
    patch:
      summary: Изменение статуса проверки в истории
      description: Изменяет статус проверки с указанным `check_id`.
      tags:
        - DataQuality
      security:
        - BearerAuth: []

      parameters:
        - name: check_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Новый статус проверки.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: boolean
      responses:
        '200':
          description: Успешное обновление статуса.
        '400':
          description: Отсутствуют обязательные поля.
        '404':
          description: Запись не найдена.
        '403':
          description: Доступно только админу.
        '500':
          description: Ошибка сервера.
  /api/dq/manage:
    put:
      tags:
        - DataQuality
      security:
        - BearerAuth: []
      summary: Включение/отключение проверок для продуктов
      description: Включает или отключает проверки для заданного типа продукта и проверки.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                check_type:
                  type: string
                  enum: ["DQ1", "DQ2.1", "DQ2.2", "DQ2.3"]
                  description: Тип проверки.
                product_type:
                  type: string
                  enum: ["osago", "life"]
                  description: Тип продукта.
                condition:
                  type: boolean
                  description: Состояние проверки (включить или выключить).
              required:
                - check_type
                - product_type
                - condition
      responses:
        "200":
          description: Успешное обновление состояния проверок.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Checks type 'DQ1' have been enabled
        "400":
          description: Ошибка валидации данных запроса.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: product_type must be in '{"osago", "life"}'
        "404":
          description: Записи для обновления не найдены.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No records updated. Check your filters.
        "500":
          description: Внутренняя ошибка сервера.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Database connection error

  /api/dwh:
    get:
      summary: Retrieve data from DWH.
      description: |
        Fetch records from the `dwh.data_mart` table with optional filters and pagination.
      tags:
        - DWH
      security:
        - BearerAuth: []
      parameters:
        - name: product_type
          in: query
          description: Filter by product type.
          schema:
            type: string
        - name: model_name
          in: query
          description: Filter by model name.
          schema:
            type: string
        - name: is_insurance_case
          in: query
          description: Filter by whether it is an insurance case.
          schema:
            type: boolean
        - name: feature_name
          in: query
          description: Filter by feature name.
          schema:
            type: string
        - name: start_date
          in: query
          description: Filter by start date (YYYY-MM-DD).
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: Filter by end date (YYYY-MM-DD).
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: Page number for pagination.
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of records per page.
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response with paginated data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Current page number.
                  total_pages:
                    type: integer
                    description: Total number of pages.
                  total_records:
                    type: integer
                    description: Total number of records.
                  per_page:
                    type: integer
                    description: Number of records per page.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_type:
                          type: string
                        run_id:
                          type: integer
                        quote_id:
                          type: integer
                        briefcase_date:
                          type: string
                          format: date
                        start_date:
                          type: string
                          format: date
                        end_date:
                          type: string
                          format: date
                        model_name:
                          type: string
                        feature_name:
                          type: string
                        feature_value:
                          type: string
                        predict:
                          type: number
                          format: float
                        is_insurance_case:
                          type: boolean
                        data_insurance_case:
                          type: string
        '400':
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      summary: Retrieve data from DWH with filters in request body.
      description: |
        Fetch records from the `dwh.data_mart` table by providing filters in the request body.
      tags:
        - DWH
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_type:
                  type: string
                model_name:
                  type: string
                is_insurance_case:
                  type: boolean
                feature_name:
                  type: string
                start_date:
                  type: string
                  format: date
                end_date:
                  type: string
                  format: date
      responses:
        '200':
          description: Successful response with paginated data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    description: Current page number.
                  total_pages:
                    type: integer
                    description: Total number of pages.
                  total_records:
                    type: integer
                    description: Total number of records.
                  per_page:
                    type: integer
                    description: Number of records per page.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        product_type:
                          type: string
                        run_id:
                          type: integer
                        quote_id:
                          type: integer
                        briefcase_date:
                          type: string
                          format: date
                        start_date:
                          type: string
                          format: date
                        end_date:
                          type: string
                          format: date
                        model_name:
                          type: string
                        feature_name:
                          type: string
                        feature_value:
                          type: string
                        predict:
                          type: number
                          format: float
                        is_insurance_case:
                          type: boolean
                        data_insurance_case:
                          type: string
        '400':
          description: Bad request due to invalid input.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/dwh/export:
    post:
      tags:
        - DWH
      security:
        - BearerAuth: []
      summary: Экспорт данных в CSV
      description: Экспортирует данные из DWH в формате CSV в соответствии с фильтрами, переданными в запросе.
      operationId: exportData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_type:
                  type: string
                  description: Тип продукта
                run_id:
                  type: string
                  description: ID выполнения
                quote_id:
                  type: string
                  description: ID цитаты
                briefcase_date:
                  type: string
                  format: date
                  description: Дата кейса
                start_date:
                  type: string
                  format: date
                  description: Дата начала
                end_date:
                  type: string
                  format: date
                  description: Дата окончания
                model_name:
                  type: string
                  description: Название модели
                feature_name:
                  type: string
                  description: Название признака
                feature_value:
                  type: string
                  description: Значение признака
                predict:
                  type: number
                  format: float
                  description: Прогноз
                is_insurance_case:
                  type: boolean
                  description: Признак страхового случая
                data_insurance_case:
                  type: string
                  description: Данные страхового случая
      responses:
        '200':
          description: Данные успешно экспортированы в CSV
          content:
            text/csv:
              schema:
                type: string
                example: |
                  product_type,run_id,quote_id,briefcase_date,start_date,end_date,model_name,feature_name,feature_value,predict,is_insurance_case,data_insurance_case
                  Life,run123,quote001,2023-01-01,2023-01-10,2023-01-20,ModelX,age,45,0.85,true,Data123
        '400':
          description: Ошибка в запросе (например, некорректные фильтры)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid filters."
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error."
  /api/observability:
    get:
      tags:
        - Observability
      security:
        - BearerAuth: []
      summary: Get a list of incidents
      description: Retrieve incidents with optional filters and pagination.
      parameters:
        - name: state
          in: query
          description: Filter by id_incident.
          required: false
          schema:
            type: integer
        - name: state
          in: query
          description: Filter by incident state (e.g., Active, In Progress, Resolved).
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Filter by priority (e.g., High, Medium, Low).
          required: false
          schema:
            type: string
        - name: service
          in: query
          description: Filter by service name.
          required: false
          schema:
            type: string
        - name: trace_id
          in: query
          description: Filter by trace ID.
          required: false
          schema:
            type: integer
        - name: last_updated
          in: query
          description: Filter by incidents updated after this timestamp (ISO 8601 format).
          required: false
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: Number of records per page.
          required: false
          schema:
            type: integer
      responses:
        200:
          description: A list of incidents with pagination details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  total_pages:
                    type: integer
                  total_records:
                    type: integer
                  per_page:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id_incident:
                          type: integer
                        state:
                          type: string
                        priority:
                          type: string
                        description:
                          type: string
                          nullable: true
                        last_updated:
                          type: string
                          format: date-time
                        service:
                          type: string
                        trace_id:
                          type: integer
        400:
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
        - Observability
      security:
        - BearerAuth: []
      summary: Filter incidents
      description: Apply filters to retrieve incidents.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_incident:
                  type: integer
                  nullable: true
                state:
                  type: string
                  nullable: true
                priority:
                  type: string
                  nullable: true
                service:
                  type: string
                  nullable: true
                trace_id:
                  type: integer
                  nullable: true
                last_updated:
                  type: string
                  format: date-time
                  nullable: true
      responses:
        200:
          description: A list of incidents matching the filters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  total_pages:
                    type: integer
                  total_records:
                    type: integer
                  per_page:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id_incident:
                          type: integer
                        state:
                          type: string
                        priority:
                          type: string
                        description:
                          type: string
                          nullable: true
                        last_updated:
                          type: string
                          format: date-time
                        service:
                          type: string
                        trace_id:
                          type: integer
        400:
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/observability/create:
    post:
      tags:
        - Observability
      security:
        - BearerAuth: []
      summary: Create a new incident
      description: Add a new incident to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
                - priority
                - service
                - trace_id
              properties:
                state:
                  type: string
                priority:
                  type: string
                description:
                  type: string
                  nullable: true
                service:
                  type: string
                trace_id:
                  type: integer
      responses:
        201:
          description: Incident successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  incident:
                    type: integer
        400:
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/observability/{id_incident}:
    put:
      tags:
        - Observability
      security:
        - BearerAuth: []
      summary: Update an existing incident
      description: Modify the details of an existing incident by its ID.
      parameters:
        - name: id_incident
          in: path
          required: true
          description: The ID of the incident to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
                - priority
                - service
                - trace_id
              properties:
                state:
                  type: string
                priority:
                  type: string
                description:
                  type: string
                  nullable: true
                service:
                  type: string
                trace_id:
                  type: integer
      responses:
        200:
          description: Incident successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  incident:
                    type: integer
        400:
          description: Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: Incident not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - Observability
      security:
        - BearerAuth: []
      summary: Удалить инцидент
      description: Удаляет инцидент по указанному идентификатору.
      parameters:
        - name: id_incident
          in: path
          required: true
          description: Уникальный идентификатор инцидента
          schema:
            type: integer
            example: 42
      responses:
        '200':
          description: Инцидент успешно удален
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Уведомление об успешном удалении
                    example: Incident deleted successfully
        '404':
          description: Инцидент не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: Incident not found
        '500':
          description: Ошибка сервера при выполнении запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки
                    example: Database connection failed


  /api/monitoring:
    get:
      tags:
        - Monitoring
      security:
        - BearerAuth: []
      summary: Получение логов отчетности
      description: Получает логи отчетности модели с возможностью фильтрации и пагинации
      operationId: getReportLogs
      parameters:
        - in: query
          name: model_name
          required: false
          schema:
            type: string
        - in: query
          name: metric_name
          required: false
          schema:
            type: string
        - in: query
          name: monitoring_type
          required: false
          schema:
            type: string
        - in: query
          name: calculation_date
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Успешный ответ с данными
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  total_pages:
                    type: integer
                  total_records:
                    type: integer
                  per_page:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        model_name:
                          type: string
                        metric_name:
                          type: string
                        monitoring_type:
                          type: string
                        calculation_date:
                          type: string
                          format: date-time
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  detail:
                    type: string
        '500':
          description: Ошибка на сервере
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    post:
      tags:
        - Monitoring
      security:
        - BearerAuth: []
      summary: Получение логов отчетности с фильтрами
      description: Получает логи отчетности с фильтрацией по предоставленным данным
      operationId: postReportLogs
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model_name:
                  type: string
                metric_name:
                  type: string
                monitoring_type:
                  type: string
                # calculation_date:
                #   type: string
                #   format: date-time
                page:
                  type: integer
                  default: 1
                per_page:
                  type: integer
                  default: 10
      responses:
        '200':
          description: Успешный ответ с данными
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  total_pages:
                    type: integer
                  total_records:
                    type: integer
                  per_page:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        model_name:
                          type: string
                        metric_name:
                          type: string
                        monitoring_type:
                          type: string
                        calculation_date:
                          type: string
                          format: date-time
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  detail:
                    type: string
        '500':
          description: Ошибка на сервере
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/monitoring/create:
    post:
      tags:
        - Monitoring
      security:
        - BearerAuth: []
      summary: Создание новогого отчета
      description: Создает новый отчет для заданной модели и метрики
      operationId: createReport
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - model_name
                - metric_name
                - monitoring_type
              properties:
                model_name:
                  type: string
                  enum:
                    - osago
                    - life_insurance
                metric_name:
                  type: string
                monitoring_type:
                  type: string
                  enum:
                    - On-demand
                    - Scheduled
                time_period:
                  type: string
                  description: Time period for report generation
                  enum:
                    - lastWeek
                    - lastMonth
                    - lastYear
                    - last3Months
                  example: lastMonth
      responses:
        '201':
          description: Лог отчетности успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: integer
        '400':
          description: Ошибка валидации данных
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  detail:
                    type: string
        '500':
          description: Ошибка на сервере
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/monitoring/download/{report_id}:
    get:
      summary: Download a report file
      operationId: downloadReport
      tags:
        - Monitoring
      security:
        - BearerAuth: []
      parameters:
        - name: report_id
          in: path
          required: true
          description: The ID of the report to download
          schema:
            type: integer
      responses:
        '200':
          description: A CSV file containing the report data
          content:
            application/csv:
              schema:
                type: string
                format: binary
        '404':
          description: Report not found
        '500':
          description: Internal server error

  /api/model_catalog:
    get:
      tags:
        - ModelCatalog
      security:
        - BearerAuth: []
      summary: Получить список моделей
      description: Возвращает список всех моделей с возможностью фильтрации.
      parameters:
        - in: query
          name: model_name
          schema:
            type: string
          description: Фильтрация по имени модели
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Номер страницы
        - in: query
          name: per_page
          schema:
            type: integer
            default: 10
          description: Количество записей на странице
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  total_pages:
                    type: integer
                  total_records:
                    type: integer
                  per_page:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        model_id:
                          type: integer
                        product_code:
                          type: string
                        model_name:
                          type: string
                        status:
                          type: boolean
                        model_version:
                          type: string
                        model_description:
                          type: string
                        creation_date:
                          type: string
                          format: date-time
                        last_launch_date:
                          type: string
                          format: date-time
                        last_modified_date:
                          type: string
                          format: date-time
        '400':
          description: Неверные параметры пагинации
        '500':
          description: Ошибка на сервере

    post:
      tags:
        - ModelCatalog
      security:
        - BearerAuth: []
      summary: Создать новую модель
      description: Создает новую модель с заданными параметрами.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - model_name
                - product_code
                - status
              properties:
                model_name:
                  type: string
                product_code:
                  type: string
                status:
                  type: boolean
                model_version:
                  type: string
                  default: "1.0"
                model_description:
                  type: string
                  default: ""
      responses:
        '201':
          description: Модель успешно создана
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  model_id:
                    type: integer
        '400':
          description: Отсутствуют обязательные поля
        '500':
          description: Ошибка на сервере

  /api/model_catalog/{model_name}:
    get:
      tags:
        - ModelCatalog
      security:
        - BearerAuth: []
      summary: Получить модель по name
      description: Возвращает модель по заданному name.
      parameters:
        - in: path
          name: model_name
          required: true
          schema:
            type: string
          description: name модели
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  product_code:
                    type: string
                  model_name:
                    type: string
                  status:
                    type: boolean
                  model_version:
                    type: string
                  model_description:
                    type: string
                  creation_date:
                    type: string
                    format: date-time
                  last_launch_date:
                    type: string
                    format: date-time
                  last_modified_date:
                    type: string
                    format: date-time
        '404':
          description: Модель не найдена
        '500':
          description: Ошибка на сервере

    put:
      tags:
        - ModelCatalog
      security:
        - BearerAuth: []
      summary: Обновить модель по name
      description: Обновляет существующую модель с заданными параметрами.
      parameters:
        - in: path
          name: model_name
          required: true
          schema:
            type: string
          description: name модели
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                model_name:
                  type: string
                product_code:
                  type: string
                status:
                  type: boolean
                model_version:
                  type: string
                model_description:
                  type: string
      responses:
        '200':
          description: Модель обновлена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Ошибочные данные запроса
        '404':
          description: Модель не найдена
        '500':
          description: Ошибка на сервере

    delete:
      tags:
        - ModelCatalog
      security:
        - BearerAuth: []
      summary: Удалить модель по name
      description: Удаляет модель по заданному name.
      parameters:
        - in: path
          name: model_name
          required: true
          schema:
            type: string
          description: name модели
      responses:
        '200':
          description: Модель успешно удалена
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Модель не может быть удалена, так как связана с оценками
        '404':
          description: Модель не найдена
        '500':
          description: Ошибка на сервере



  /api/dq/checks:
    get:
      summary: Получить список проверок
      description: Возвращает список проверок с их типами, кодами продуктов и условиями.
      tags:
        - DataQuality
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Успешный ответ с данными проверок
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Уникальный идентификатор проверки.
                      example: 3
                    type:
                      type: string
                      description: Тип проверки
                      example: DQ1
                    product_code:
                      type: string
                      description: Код продукта.
                      example: prod001
                    condition:
                      type: boolean
                      description: Статус проверки
                      example: true
        '500':
          description: Ошибка сервера при выполнении запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Описание ошибки.
                    example: Database connection failed

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    QuoteRequest:
      type: object
      properties:
        quote:
          $ref: '#/components/schemas/Quote'
    Quote:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/Header'
        product:
          $ref: '#/components/schemas/Product'
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
    Header:
      type: object
      properties:
        runId:
          type: string
        quoteId:
          type: string
        dateTime:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        productType:
          type: string
        productCode:
          type: string
    Subject:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        middleName:
          type: string
        birthDate:
          type: string
          format: date
        gender:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        documents:
          type: array
          items:
            $ref: '#/components/schemas/Document'
    Address:
      type: object
      properties:
        country:
          type: string
        region:
          type: string
        city:
          type: string
        street:
          type: string
        houseNumber:
          type: string
        apartmentNumber:
          type: string
    Document:
      type: object
      properties:
        documentType:
          type: string
        documentNumber:
          type: string
        issueDate:
          type: string
          format: date
    QuoteResponse:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/Header'
        predict:
          type: object
          properties:
            percent:
              type: string
              example: 38.62%
            score:
              type: number
              format: float
              example: 0.3862294713942135
